/*
 * Copyright 2016-2017 The Reaktivity Project
 *
 * The Reaktivity Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
scope protocol
{
    option byteorder network;

    scope codec
    {
        struct RequestHeader
        {
          int32 size;
          int16 apiKey;
          int16 apiVersion;
          int32 correlationId;
          string16 clientId /* = null */;
        }

        struct ResponseHeader
        {
          int32 size;
        }
        
        scope config
        {
            struct DescribeConfigsRequest
            {
              int32 resourceCount;
            }
            
            struct ResourceRequest
            {
                int8 type;
                string16 name;
                int32 configNamesCount;
            }
            
            struct DescribeConfigsResponse
            {
                int32 correlationId;
                int32 throttleTimeMillis;
                int32 resourceCount;
            }
            
            struct ResourceResponse
            {
                int16 errorCode;
                string16 errorMessage;
                int8 type;
                string16 name;
                int32 configCount;
            }
            
            struct ConfigResponse
            {
                string16 name;
                string16 value;
                int8 readOnly; // boolean
                int8 isDefault; // boolean
                int8 isSensitive; // boolean
            }
        }

        scope fetch
        {
            struct FetchRequest
            {
              int32 replicaId = -1;
              int32 maxWaitTimeMillis;
              int32 minBytes;
              int32 maxBytes;
              int8 isolationLevel;
              int32 topicCount;
            }

            struct TopicRequest
            {
              string16 name;
              int32 partitionCount;
            }

            struct PartitionRequest
            {
              int32 partitionId;
              int64 fetchOffset;
              int64 logStartOffset = -1;
              int32 maxBytes;
            }

            struct FetchResponse
            {
              int32 correlationId;
              int32 throttleTimeMillis;
              int32 topicCount;
            }

            struct TopicResponse
            {
              string16 name;
              int32 partitionCount;
            }

            struct PartitionResponse
            {
              int32 partitionId;
              int16 errorCode;
              int64 highWatermark;
              int64 lastStableOffset;
              int64 logStartOffset;
              int32 abortedTransactionCount;
            }

            struct TransactionResponse
            {
              int64 producerId;
              int64 firstOffset;
            }

            struct RecordSet
            {
              int32 recordBatchSize;
            }

            struct RecordBatch
            {
              int64 firstOffset;
              int32 length;
              int32 leaderEpoch;
              int8  magic;
              int32 crc;
              int16 attributes;
              int32 lastOffsetDelta;
              int64 firstTimestamp;
              int64 maxTimestamp;
              int64 producerId;
              int16 producerEpoch;
              int32 firstSequence;
              int32 recordCount;
            }

            struct Record
            {
              varint32 length;
              int8   attributes;
              varint32 timestampDelta;
              varint32 offsetDelta;
              varint32 keyLen;
              octets[keyLen] key = null;
              varint32 valueLen;
              octets[valueLen] value = null;
              varint32 headerCount;
            }

            struct Header
            {
              varint32 keyLen;
              octets[keyLen] key; // interpreted as UTF-8 string
              varint32 valueLen;
              octets[valueLen] value;
            }
        }

        scope metadata
        {
            struct MetadataRequest
            {
              int32 topicCount = 1; // only allow 1 till we have string array
              string16 topicName;   // later: should be an array
              int8 allow_auto_topic_creation = 0; // boolean
            }

            struct MetadataResponse
            {
              int32 correlationId;
              int32 throttleTimeMillis;
              int32 brokerCount;
            }

            struct BrokerMetadata
            {
              int32 nodeId;
              string16 host;
              int32 port;
              string16 rack; // = null
            }

            struct MetadataResponsePart2
            {
              string16 clusterId;
              int32 controllerId;
              int32 topicCount;
            }

            struct TopicMetadata
            {
              int16 errorCode;
              string16 topic;
              int8 isInternal; // boolean
              int32 partitionCount;
            }

            struct PartitionMetadata
            {
              int16 errorCode;
              int32 partitionId;
              int32 leader;
              int32 replicas;
              int32 inSyncReplicas;
              int32 offlineReplicas;
            }
        }
    }
}
